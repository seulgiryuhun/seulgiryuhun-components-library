name: Release Workflow

on:
  push:
    branches:
      - feat/workflow

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org/'
          scope: '@my-org'
          token: ${{secrets.NPM_TOKEN}}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Run Tests
        run: pnpm test

  release:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org/'
          scope: '@my-org'
          token: ${{secrets.NPM_TOKEN}}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install hub CLI
        run: sudo snap install hub --classic

      - name: Install Dependencies
        run: pnpm install

      - name: Build Library
        run: pnpm run build:lib

      - name: Set new version and create GitHub release
        run: |
          current_version=$(node -e "console.log('current version:',require('./package.json').version)")
          commit_message=$(git log -1 --pretty=%B)

          if [[ $commit_message == *"[major]"* ]]; then
            echo "Bumping to a major version"
            npm version major --no-git-tag-version
          elif [[ $commit_message == *"[minor]"* ]]; then
            echo "Bumping to a minor version"
            npm version minor --no-git-tag-version
          else
            echo "Bumping to a patch version"
            npm version patch --no-git-tag-version
          fi

          # Get the new version
          new_version=$(node -e "console.log('new version:', require('./package.json').version)")

          # Check if version changed
          if [[ "${current_version}" != "${new_version}" ]]; then
            echo "Updated package.json version to: ${new_version}"
            git push origin HEAD --follow-tags

            # Create GitHub release
            body=$(git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"- %s" | grep -v 'Merge pull request')
            hub release create -m "Release v${new_version}" -m "${body}" "v${new_version}"
          else
            echo "No version change detected. Skipping version update."
          fi
